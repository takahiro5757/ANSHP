---
description: 
globs: 
alwaysApply: true
---
# プロジェクトルール

## CSS管理ルール

### 1. ディレクトリ構造の徹底
- `/assets/css/base/` - 基本設定（変数、リセット、タイポグラフィ）
- `/assets/css/components/` - 共通コンポーネント
- `/assets/css/pages/` - ページ固有スタイル
- `responsive.css` - メディアクエリを集約

### 2. コンポーネント分離原則
- ページ間で共通して使われる要素は必ず`components/`に配置
- 複数ページで使われているスタイルを発見した場合は直ちにコンポーネント化

### 3. ファイル命名規則
- コンポーネント： 機能名.css（例：`header.css`, `page-hero.css`）
- ページ： ページ名.css（例：`about.css`, `interview.css`）
- 個別ページ： ページ名-個別名.css（例：`interview-tanaka.css`）

### 4. インラインスタイル排除ルール
- HTMLのstyle属性は使用禁止（すべて外部CSSファイルに記述）
- 特定の背景画像などもCSSで管理
- JSで直接style.propertyを設定しない
- 代わりにクラスを追加/削除で対応
- パララックスなど特殊効果のみ例外として許可
- ページ固有の色やスタイル値は:rootで変数定義
- !importantの使用は最小限に

## プロジェクト全体構造

### 1. ファイル構成の概要

```
/ (ルートディレクトリ)
├── index.html         # トップページ
├── pages/             # 各種ページ
│   ├── about/         # 会社概要ページ
│   ├── contact/       # お問い合わせページ
│   ├── interview/     # インタビューページ
│   │   ├── index.html # インタビュー一覧
│   │   ├── tanaka/    # 田中さんのインタビュー
│   │   ├── sato/      # 佐藤さんのインタビュー
│   │   └── suzuki/    # 鈴木さんのインタビュー
│   └── recruit/       # 採用情報ページ
├── assets/            # 静的ファイル
│   ├── css/           # スタイルシート
│   │   ├── base/      # 基本設定
│   │   ├── components/# 共通コンポーネント
│   │   └── pages/     # ページ固有スタイル
│   ├── js/            # JavaScript
│   ├── images/        # 画像ファイル
│   ├── videos/        # 動画ファイル
│   └── parts/         # 共通HTMLパーツ
└── buckpu0516/        # 移行前のバックアップ
```

### 2. 各ディレクトリの役割

#### 2.1 ページ構造 (`pages/`)

- **about/**: 会社概要、企業理念、事業内容などを説明するページ
- **contact/**: お問い合わせフォームを含むページ
- **interview/**: 社員インタビューを集約したセクション
  - インデックスページ: 全インタビューの一覧
  - 個別ページ: 各社員の詳細インタビュー（田中、佐藤、鈴木）
- **recruit/**: 採用情報、募集職種、応募方法などのページ

#### 2.2 アセット管理 (`assets/`)

##### 2.2.1 CSS構造 (`assets/css/`)

- **base/**: 基本設定
  - `variables.css`: カラーコード、フォントサイズなどの変数定義
  - `reset.css`: ブラウザのデフォルトスタイルのリセット
  - `typography.css`: フォント関連の基本設定
  - `animations.css`: アニメーション定義

- **components/**: 共通コンポーネント
  - `header.css`: ヘッダー部分のスタイル
  - `footer.css`: フッター部分のスタイル
  - `buttons.css`: ボタン要素のスタイル
  - `cards.css`: カード型UIのスタイル
  - `sections.css`: セクション区切りのスタイル
  - `page-hero.css`: ページヒーロー（トップバナー）のスタイル

- **pages/**: ページ固有スタイル
  - `home.css`: トップページ専用スタイル
  - `about.css`: 会社概要ページのスタイル
  - `contact.css`: お問い合わせページのスタイル
  - `interview.css`: インタビュー一覧ページのスタイル
  - `interview-detail.css`: インタビュー詳細の共通スタイル
  - `interview-tanaka.css`, `interview-sato.css`, `interview-suzuki.css`: 各インタビュー固有のスタイル
  - `recruit.css`: 採用情報ページのスタイル
  - `recruit-general.css`, `recruit-part-time.css`: 採用タイプ別スタイル

##### 2.2.2 JavaScript構造 (`assets/js/`)

- `main.js`: サイト全体で使用する主要な機能（アニメーション、スクロール効果など）
- `common.js`: 共通機能（ヘッダー固定、モバイルメニューなど）
- `interview-detail.js`: インタビューページ専用の機能

##### 2.2.3 共通パーツ (`assets/parts/`)

- `header.html`: 全ページで使用するヘッダー部分
- `footer.html`: 全ページで使用するフッター部分

### 3. 技術スタック

- HTML5, CSS3, JavaScript (ES6+)
- jQuery: DOM操作、アニメーション実装
- Bootstrap 5: レスポンシブグリッドシステム
- GSAP: 高度なアニメーション実装
- AOS: スクロールベースのアニメーション

## バックアップと移行前ファイル参照

### 1. バックアップファイル
- プロジェクト内にバックアップファイルが保存されています
- 重要な変更を行う前には必ずバックアップを作成してください

### 2. 移行前ファイル参照
- 移行前の内容確認や比較が必要な場合は `/buckpu0516` フォルダを参照してください
- このフォルダには移行前のファイルがそのまま保存されています
- HTML/CSS/JavaScriptなどの構造やデザインの確認に利用できます
- 実装内容の確認や整合性チェックを行う際に参照してください

## 開発ガイドライン

### 1. HTMLコーディング規約
- セマンティックHTMLを使用（適切なタグ選択）
- アクセシビリティに配慮（alt属性の設定など）
- インデント: 2スペースで統一
- コメントで大きなセクションを区切る

### 2. CSSコーディング規約
- クラス命名規則: BEMライクな命名を推奨
- 色やサイズは変数を使用
- ネスティングは3段階までに制限
- モバイルファーストのレスポンシブデザイン

### 3. JavaScriptコーディング規約
- モジュールパターンの使用
- イベントデリゲーションの活用
- パフォーマンスに配慮（節制的なDOM操作）
- エラーハンドリングの徹底

## 注意事項
- 上記の要素に関するコードの提案や修正は避けてください
- その他の部分については、通常通り改善提案や修正を行ってください
